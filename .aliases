# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# alias
alias vim="nvim"
alias valiases="vim ~/.aliases"
alias vgit="vim ~/.gitconfig"
alias vtmux="vim ~/.tmux.conf"
alias vzshrc="vim ~/.zshrc"
alias szshrc="source ~/.zshrc"
alias whereami="git rev-parse --abbrev-ref HEAD"
alias gg="git pull"
alias cpwd="pwd | pbcopy"
alias whereami="git rev-parse --abbrev-ref HEAD"

# Ag
alias agls="ag -l --hidden -g "
find_and_replace_with_ag() {
  ag -l "$1" | xargs sed -i '' -e "s/$1/$2/g"
}
alias agrp=find_and_replace_with_ag

function docker_compose_current_project {
  dc_run_path=`basename "$PWD"`
  if [[ $dc_run_path == "webapp" ]]; then
    dc_run_path='web'
  fi
  echo $dc_run_path
}

function docker_compose_exec_cmd {
  dc_args="--rm"

  cmd="docker-compose run $dc_args $(docker_compose_current_project) ${@:1}"
  echo $cmd
  sh -i -c $cmd
}

function spec {
  if [[ -f "bin/rspec" ]]; then
    cmd="bundle exec bin/rspec ${@:1}"
  else
    cmd="bundle exec rspec ${@:1}"
  fi

  docker_compose_exec_cmd $cmd
}

function cons {
  if [[ -f "bin/console" ]]; then
    cmd="bundle exec bin/console"
  else
    cmd="bundle exec rails c"
  fi

  docker_compose_exec_cmd $cmd
}

function run {
  docker_compose_exec_cmd "${@:1}"
}

function brun {
  docker_compose_exec_cmd "bundle exec ${@:1}"
}

function enter {
  docker_compose_exec_cmd "/bin/bash"
}

function logs {
  cmd="docker-compose logs -ft --tail=40"
  echo $cmd
  sh -i -c $cmd
}

function attach {
  # list_containers="$(docker-compose ps -q $(docker_compose_current_project))"
  # trg_container="$(docker-compose ps -q $(docker_compose_current_project) | head -n 1)"
  # echo Currently running containers
  # echo $list_containers
  # echo Attaching to 1st: $trg_container
  echo To exit press: Ctrl+P, Ctrl+Q
  dc_run_path=`basename "$PWD"`
  dc_srv_name="$1"
  [ -z "$dc_srv_name" ] && dc_srv_name="$(docker_compose_current_project)"
  cmd="docker container attach ${dc_run_path}_${dc_srv_name}_1"
  echo $cmd
  sh -i -c $cmd
}

alias sync="source $HOME/dotfiles/sync.sh"

# golang
# docker run with mount inline
function dgolang {
  set -v
  docker run --rm -v "$PWD":/usr/src/app -w /usr/src/app golang "${@:1}"
  set +v
}

touch2() { mkdir -p "$(dirname "$1")" && touch "$1" ; }
