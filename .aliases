# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# alias
# https://stackoverflow.com/questions/3446320/in-vim-how-to-map-save-to-ctrl-s
alias vim="stty -ixon && vim -v"
alias valiases="vim ~/.aliases"
alias vzshrc="vim ~/.zshrc"
alias szshrc="source ~/.zshrc"
alias gith="cd $HOME/git"
alias infr="gith && cd onelogin/docker/infrakit"
alias mr="cd $HOME/git/onelogin.com"
alias cr="cd $HOME/git/core-api"
alias qm="cd $HOME/git/queued-messages-relay"
alias ds="cd $HOME/git/directory-service"
alias en="cd $HOME/git/core-api-mapping-engine"
alias whereami="git rev-parse --abbrev-ref HEAD"
alias gg="git pull"

# path
alias bastion="ssh bastionhostnonprod.onlgn.net -p 23222"
alias shcons="ssh api01.use1.shadow01.onlgn.net -t 'sudo -i -u deploy bash -c \"cd /srv/onelogin_new/current && bundle exec script/console shadow\"'"

# Ag
alias agls="ag -l --hidden -g "
find_and_replace_with_ag() {
  ag -l "$1" | xargs sed -i '' -e "s/$1/$2/g"
}
alias agrp=find_and_replace_with_ag

# IKE
alias ikeupdate="npm install -g @onelogin/infrakit"
alias cpwd="pwd | pbcopy"
alias whereami="git rev-parse --abbrev-ref HEAD"

function docker_compose_current_project {
  dc_run_path=`basename "$PWD"`
  if [[ $dc_run_path == "webapp" ]]; then
    dc_run_path='web'
  fi
  echo $dc_run_path
}

function docker_compose_exec_cmd {
  dc_args="--rm"

  cmd="docker-compose run $dc_args $(docker_compose_current_project) ${@:1}"
  echo $cmd
  sh -i -c $cmd
}

function spec {
  if [[ -f "bin/rspec" ]]; then
    cmd="bundle exec bin/rspec $1"
  else
    cmd="bundle exec rspec $1"
  fi

  docker_compose_exec_cmd $cmd
}

function cons {
  if [[ -f "bin/console" ]]; then
    cmd="bundle exec bin/console"
  else
    cmd="bundle exec rails c"
  fi

  docker_compose_exec_cmd $cmd
}

function run {
  docker_compose_exec_cmd "${@:1}"
}

function enter {
  docker_compose_exec_cmd "/bin/bash"
}

function logs {
  cmd="docker-compose logs -ft --tail=40"
  echo $cmd
  sh -i -c $cmd
}

function attach {
  list_containers="$(docker-compose ps -q $(docker_compose_current_project))"
  trg_container="$(docker-compose ps -q $(docker_compose_current_project) | head -n 1)"
  echo Currently running containers
  echo $list_containers
  echo Attaching to 1st: $trg_container
  echo To exit press: Ctrl+P, Ctrl+Q
  cmd="docker attach $trg_container"
  echo $cmd
  sh -i -c $cmd
}

# export IKE_HOME="$HOME/git/onelogin/docker/ike"
# export IKE_EXE="$IKE_HOME/ike.js"

# function ike_current_project {
#   ike_run_path=`basename "$PWD"`
#   if [[ $ike_run_path == "onelogin.com" ]]; then
#     ike_run_path='monorail-admin'
#   elif [[ $ike_run_path == "onelogin-provisioning" ]]; then
#     ike_run_path='provisioning-worker'
#   fi
#   echo $ike_run_path
# }

# function ike_exec_cmd {
#   [[ "$IKE_BRANCH" = "" ]] && tag="--tag $(whereami)" || tag="--tag $IKE_BRANCH"
#   [[ "$IKE_ENV" = "" ]] && ike_env="-e dev" || ike_env="-e $IKE_ENV"

#   args="--dev $tag $ike_env"

#   cmd="$IKE_EXE run $(ike_current_project) $args '${@:1}'"
#   echo $cmd
#   sh -i -c $cmd
# }
# function cons {
#   if [[ -f "script/console" ]]; then
#     cmd="bundle exec script/console"
#   elif [[ -f "bin/console" ]]; then
#     cmd="bundle exec bin/console"
#   else
#     cmd="rails c"
#   fi

#   ike_exec_cmd $cmd
# }

# function spec {
#   if [[ -f "bin/rspec" ]]; then
#     cmd="bundle exec bin/rspec $1"
#   elif [[ -f "script/spec" ]]; then
#     cmd="bundle exec script/spec $1"
#   else
#     cmd="rspec"
#   fi

#   IKE_ENV="test"
#   ike_exec_cmd $cmd
#   IKE_ENV=""
# }

# function run {
#   ike_exec_cmd "${@:1}"
# }

# function rune {
#   local arg env
#   while getopts 'e:' arg
#   do
#     case ${arg} in
#       e) env=${OPTARG};;
#       *) return 1 # illegal option
#     esac
#   done

#   IKE_ENV="$env"
#   ike_exec_cmd "${@:2}"
#   IKE_ENV=""
# }

# function enter {
#   ike_exec_cmd "/bin/bash"
# }

# function logs {
#   cmd="$IKE_HOME/ike.js logs -f $(ike_current_project)"
#   echo $cmd
#   sh -i -c $cmd
# }

# function conf {
#   gopwd="$IKE_HOME/../infrakit/ol/$(ike_current_project)"
#   cd $gopwd
# }

function rcp {
  cmd="ditto $1 /Users/romantomkiv/git/core-api-mapping-engine/$1"
  echo $cmd
  sh -i -c $cmd
}


alias ak="ssh-add ~/.ssh/gitmbp13"
alias al="ssh-add ~/.ssh/git_mbp"

alias ike="$IKE_EXE"

alias sync="source $HOME/dotfiles/sync.sh"

# golang
# docker run with mount inline
function dgolang {
  set -v
  docker run --rm -v "$PWD":/usr/src/app -w /usr/src/app golang "${@:1}"
  set +v
}

alias cdch="cd ~/Challenges"
alias dirb="docker run --rm -it ruby irb"

# Brokerkit
BROKERKIT_HOME="$HOME/git/brokerkit"
alias api="cd $BROKERKIT_HOME/api"
alias web="cd $BROKERKIT_HOME/webapp"
